@startuml
namespace handler {
    class Handler << (S,Aquamarine) >> {
        - sm *sessionmanager.SessionManager
        - pm *passwordmanager.PasswordManager
        - reg *register.Register
        - tmpl *template.Template

        - checkSession(r *http.Request) (*sessionmanager.Session, error)

        + LoginPage(w http.ResponseWriter, r *http.Request) 
        + Login(w http.ResponseWriter, r *http.Request) 
        + RegisterPage(w http.ResponseWriter, r *http.Request) 
        + Register(w http.ResponseWriter, r *http.Request) 
        + Logout(w http.ResponseWriter, r *http.Request) 
        + Add(w http.ResponseWriter, r *http.Request) 
        + Delete(w http.ResponseWriter, r *http.Request) 
        + Search(w http.ResponseWriter, r *http.Request) 
        + ReturnToMainPage(w http.ResponseWriter, r *http.Request) 
        + MainPage(w http.ResponseWriter, r *http.Request) 
        + CheckSessionMiddleWare(next http.Handler) http.Handler

    }
}


namespace passwordmanager {
    class PasswordManager << (S,Aquamarine) >> {
        + Insert(in *User) error
        + Check(in *User) (bool, bool, error)
        + IsLoginAvailable(login string) (bool, error)
        + CreateHash(password string) string

    }
    class User << (S,Aquamarine) >> {
        + Login string
        + Password string

    }
}
"studiodb.DB" *-- "passwordmanager.PasswordManager"


namespace register {
    class Item << (S,Aquamarine) >> {
        + Id int
        + Organization string
        + City string
        + Phone string

    }
    class Register << (S,Aquamarine) >> {
        + Insert(i Item) error
        + SelectAll() ([]Item, error)
        + SelectAny(i Item) ([]Item, error)
        + Delete(virtualID int) error

    }
}
"studiodb.DB" *-- "register.Register"


namespace sessionmanager {
    class Session << (S,Aquamarine) >> {
        + Login string
        + Useragent string
        + Priveleged bool

    }
    class SessionID << (S,Aquamarine) >> {
        + String() string

    }
    class SessionManager << (S,Aquamarine) >> {
        - client *redis.Client
        - ctx context.Context

        + Create(s *Session) (*SessionID, error)
        + Check(id SessionID) (*Session, error)
        + Delete(id SessionID) error

    }
    class sessionmanager.SessionID << (T, #FF7700) >>  {
    }
    class "uuid.UUID" as uuidUUID {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


namespace studiodb {
    class DB << (S,Aquamarine) >> {
    }
}
"sql.DB" *-- "studiodb.DB"


"sessionmanager.uuidUUID" #.. "sessionmanager.SessionID"
@enduml
